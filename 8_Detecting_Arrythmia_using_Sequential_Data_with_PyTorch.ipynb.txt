{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "8. Detecting Arrythmia using Sequential Data with PyTorch",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qL7KO2SAQHuw"
      },
      "source": [
        "This notebook was made to convert the code that is written in 'Chainer' to 'PyTorch' of chapter 8 of the Specialised Japan Medical AI course. Check the follwing link: https://japan-medical-ai.github.io/medical-ai-course-materials/notebooks/08_Sequential_Data_Analysis_with_Deep_Learning.html"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6G2qenL-QR4S"
      },
      "source": [
        "In this notebook we will try to detect arrythmia from wave signals collected though an electrocardiogram."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2MJdjqVOBrq8"
      },
      "source": [
        "## **1. Setup**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b6zwznd_QUqg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "6a9f6602-bcac-4366-d023-ec8d730053e8"
      },
      "source": [
        "!apt -y -q install tree\n",
        "!pip install wfdb==2.2.1 scikit-learn==0.20.1 imbalanced-learn==0.4.3\n",
        "!pip install cupy"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reading package lists...\n",
            "Building dependency tree...\n",
            "Reading state information...\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-440\n",
            "Use 'apt autoremove' to remove it.\n",
            "The following NEW packages will be installed:\n",
            "  tree\n",
            "0 upgraded, 1 newly installed, 0 to remove and 35 not upgraded.\n",
            "Need to get 40.7 kB of archives.\n",
            "After this operation, 105 kB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 tree amd64 1.7.0-5 [40.7 kB]\n",
            "Fetched 40.7 kB in 0s (85.6 kB/s)\n",
            "Selecting previously unselected package tree.\n",
            "(Reading database ... 144487 files and directories currently installed.)\n",
            "Preparing to unpack .../tree_1.7.0-5_amd64.deb ...\n",
            "Unpacking tree (1.7.0-5) ...\n",
            "Setting up tree (1.7.0-5) ...\n",
            "Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n",
            "Collecting wfdb==2.2.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b2/96/c2200539fdf4f087e14d30ed62a66544b6f441196bcb8ecc7a29ec6503b9/wfdb-2.2.1.tar.gz (94kB)\n",
            "\u001b[K     |████████████████████████████████| 102kB 4.1MB/s \n",
            "\u001b[?25hCollecting scikit-learn==0.20.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/10/26/d04320c3edf2d59b1fcd0720b46753d4d603a76e68d8ad10a9b92ab06db2/scikit_learn-0.20.1-cp36-cp36m-manylinux1_x86_64.whl (5.4MB)\n",
            "\u001b[K     |████████████████████████████████| 5.4MB 11.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: imbalanced-learn==0.4.3 in /usr/local/lib/python3.6/dist-packages (0.4.3)\n",
            "Collecting nose>=1.3.7\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/15/d8/dd071918c040f50fa1cf80da16423af51ff8ce4a0f2399b7bf8de45ac3d9/nose-1.3.7-py3-none-any.whl (154kB)\n",
            "\u001b[K     |████████████████████████████████| 163kB 56.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.11.0 in /usr/local/lib/python3.6/dist-packages (from wfdb==2.2.1) (1.18.5)\n",
            "Requirement already satisfied: matplotlib>=1.5.1 in /usr/local/lib/python3.6/dist-packages (from wfdb==2.2.1) (3.2.2)\n",
            "Requirement already satisfied: requests>=2.10.0 in /usr/local/lib/python3.6/dist-packages (from wfdb==2.2.1) (2.23.0)\n",
            "Requirement already satisfied: pandas>=0.19.1 in /usr/local/lib/python3.6/dist-packages (from wfdb==2.2.1) (1.0.5)\n",
            "Requirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.6/dist-packages (from wfdb==2.2.1) (1.4.1)\n",
            "Requirement already satisfied: sklearn>=0.0 in /usr/local/lib/python3.6/dist-packages (from wfdb==2.2.1) (0.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=1.5.1->wfdb==2.2.1) (1.2.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=1.5.1->wfdb==2.2.1) (2.4.7)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=1.5.1->wfdb==2.2.1) (2.8.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=1.5.1->wfdb==2.2.1) (0.10.0)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.10.0->wfdb==2.2.1) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.10.0->wfdb==2.2.1) (2020.6.20)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.10.0->wfdb==2.2.1) (1.24.3)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.10.0->wfdb==2.2.1) (2.10)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.19.1->wfdb==2.2.1) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.1->matplotlib>=1.5.1->wfdb==2.2.1) (1.15.0)\n",
            "Building wheels for collected packages: wfdb\n",
            "  Building wheel for wfdb (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for wfdb: filename=wfdb-2.2.1-cp36-none-any.whl size=100368 sha256=a5b5e5052ca04c58b7dc62fac66c2dc4d3ed7806f0dd4ad37c9069978d4a4882\n",
            "  Stored in directory: /root/.cache/pip/wheels/bb/a9/00/0078d26b0c15b31be0001af8eb659496709c361c69641303f1\n",
            "Successfully built wfdb\n",
            "Installing collected packages: nose, wfdb, scikit-learn\n",
            "  Found existing installation: scikit-learn 0.22.2.post1\n",
            "    Uninstalling scikit-learn-0.22.2.post1:\n",
            "      Successfully uninstalled scikit-learn-0.22.2.post1\n",
            "Successfully installed nose-1.3.7 scikit-learn-0.20.1 wfdb-2.2.1\n",
            "Collecting cupy\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e8/b9/b9c1d6cd6950a87a87e87e56c80a4b1e430b220e988ebae763120d7b9792/cupy-7.8.0.tar.gz (3.9MB)\n",
            "\u001b[K     |████████████████████████████████| 3.9MB 5.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from cupy) (1.18.5)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from cupy) (1.15.0)\n",
            "Requirement already satisfied: fastrlock>=0.3 in /usr/local/lib/python3.6/dist-packages (from cupy) (0.5)\n",
            "Building wheels for collected packages: cupy\n",
            "  Building wheel for cupy (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for cupy: filename=cupy-7.8.0-cp36-cp36m-linux_x86_64.whl size=33350897 sha256=7a51389c7a2e1ce4f8a5bcae8c65b62b15d368d908e77d9c0da5b401f2c55239\n",
            "  Stored in directory: /root/.cache/pip/wheels/a1/2d/41/7785f001fd5ca210bae78586c2f7a9ac8e6878f4f7e7005b63\n",
            "Successfully built cupy\n",
            "Installing collected packages: cupy\n",
            "Successfully installed cupy-7.8.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zlyEjUcRRJCL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "outputId": "073a64ff-1589-47f8-ebb1-1ba2f61214f6"
      },
      "source": [
        "import os\n",
        "import random\n",
        "import numpy as np\n",
        "import chainer\n",
        "import scipy\n",
        "import pandas as pd\n",
        "import seaborn as sn\n",
        "import wfdb\n",
        "import sklearn\n",
        "import imblearn\n",
        "\n",
        "import cupy\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "\n",
        "from imblearn.datasets import make_imbalance\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from google.colab import drive\n",
        "from scipy.signal import butter, lfilter\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from torch.autograd import Variable\n",
        "from torch.utils.data.dataset import Dataset \n",
        "\n",
        "%matplotlib inline\n",
        "# os.environ['CUDA_LAUNCH_BLOCKING'] = '1'"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/chainer/_environment_check.py:91: UserWarning: \n",
            "--------------------------------------------------------------------------------\n",
            "Multiple installations of CuPy package has been detected.\n",
            "You should select only one package from from ['cupy-cuda102', 'cupy-cuda101', 'cupy-cuda100', 'cupy-cuda92', 'cupy-cuda91', 'cupy-cuda90', 'cupy-cuda80', 'cupy'].\n",
            "Follow these steps to resolve this issue:\n",
            "  1. `pip list` to list CuPy packages installed\n",
            "  2. `pip uninstall <package name>` to uninstall all CuPy packages\n",
            "  3. `pip install <package name>` to install the proper one\n",
            "--------------------------------------------------------------------------------\n",
            "\n",
            "  '''.format(name=name, pkgs=pkgs))\n",
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jHUmH48MbFx9"
      },
      "source": [
        "#Setting a random seed, so we will always get the same results\n",
        "def reset_seed(seed=42):\n",
        "    random.seed(seed)\n",
        "    np.random.seed(seed)\n",
        "    if chainer.cuda.available:\n",
        "        chainer.cuda.cupy.random.seed(seed)\n",
        "\n",
        "reset_seed(42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k7MrQnU2v9Dz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d0d45dda-54c7-4f1d-daa8-f9afe8d282d6"
      },
      "source": [
        "#Mounting Google Drive to save trained models to\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L8iXrNsHB00p"
      },
      "source": [
        "## **2. Training the ResNet34 model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hmX3OgAXR0Ug",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "850ccf34-9c02-44e5-95df-08946fbb0c30"
      },
      "source": [
        "#Downloading the MIT-BIH dataset\n",
        "dataset_root = './dataset'\n",
        "download_dir = os.path.join(dataset_root, 'download')\n",
        "wfdb.dl_database('mitdb', dl_dir=download_dir)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading files...\n",
            "Finished downloading files\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "djD8QFXESMHn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "outputId": "a8124064-3658-4922-8889-ca194cc0ab2f"
      },
      "source": [
        "#Each ID has 3 files associated with it:\n",
        "#- The signal file (.dat) \n",
        "#- An annotation file (.atr)\n",
        "#- A header file (.hea)\n",
        "print(sorted(os.listdir(download_dir)))\n",
        "\n",
        "#Reading a .dat file\n",
        "wfdb.rdsamp('./dataset/download/101')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['100.atr', '100.dat', '100.hea', '101.atr', '101.dat', '101.hea', '102.atr', '102.dat', '102.hea', '103.atr', '103.dat', '103.hea', '104.atr', '104.dat', '104.hea', '105.atr', '105.dat', '105.hea', '106.atr', '106.dat', '106.hea', '107.atr', '107.dat', '107.hea', '108.atr', '108.dat', '108.hea', '109.atr', '109.dat', '109.hea', '111.atr', '111.dat', '111.hea', '112.atr', '112.dat', '112.hea', '113.atr', '113.dat', '113.hea', '114.atr', '114.dat', '114.hea', '115.atr', '115.dat', '115.hea', '116.atr', '116.dat', '116.hea', '117.atr', '117.dat', '117.hea', '118.atr', '118.dat', '118.hea', '119.atr', '119.dat', '119.hea', '121.atr', '121.dat', '121.hea', '122.atr', '122.dat', '122.hea', '123.atr', '123.dat', '123.hea', '124.atr', '124.dat', '124.hea', '200.atr', '200.dat', '200.hea', '201.atr', '201.dat', '201.hea', '202.atr', '202.dat', '202.hea', '203.atr', '203.dat', '203.hea', '205.atr', '205.dat', '205.hea', '207.atr', '207.dat', '207.hea', '208.atr', '208.dat', '208.hea', '209.atr', '209.dat', '209.hea', '210.atr', '210.dat', '210.hea', '212.atr', '212.dat', '212.hea', '213.atr', '213.dat', '213.hea', '214.atr', '214.dat', '214.hea', '215.atr', '215.dat', '215.hea', '217.atr', '217.dat', '217.hea', '219.atr', '219.dat', '219.hea', '220.atr', '220.dat', '220.hea', '221.atr', '221.dat', '221.hea', '222.atr', '222.dat', '222.hea', '223.atr', '223.dat', '223.hea', '228.atr', '228.dat', '228.hea', '230.atr', '230.dat', '230.hea', '231.atr', '231.dat', '231.hea', '232.atr', '232.dat', '232.hea', '233.atr', '233.dat', '233.hea', '234.atr', '234.dat', '234.hea']\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[-0.345, -0.16 ],\n",
              "        [-0.345, -0.16 ],\n",
              "        [-0.345, -0.16 ],\n",
              "        ...,\n",
              "        [-0.295, -0.11 ],\n",
              "        [-0.29 , -0.11 ],\n",
              "        [ 0.   ,  0.   ]]),\n",
              " {'base_date': None,\n",
              "  'base_time': None,\n",
              "  'comments': ['75 F 1011 654 x1', 'Diapres'],\n",
              "  'fs': 360,\n",
              "  'n_sig': 2,\n",
              "  'sig_len': 650000,\n",
              "  'sig_name': ['MLII', 'V1'],\n",
              "  'units': ['mV', 'mV']})"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bX7u2f5eR3VA"
      },
      "source": [
        "#Creating a data preprocessing class\n",
        "class BaseECGDatasetPreprocessor(object):\n",
        "\n",
        "  def __init__(self, dataset_root, window_size=720):\n",
        "    self.dataset_root = dataset_root\n",
        "    self.download_dir = os.path.join(self.dataset_root, 'download')\n",
        "    self.window_size = window_size\n",
        "    self.sample_rate = 360\n",
        "\n",
        "    #Splitting the IDs into train and test, whilst leaving out a few IDs which won't be used, due to issues with the data\n",
        "    self.train_record_list = ['101', '106', '108', '109', '112', '115', '116', '118', '119', '122',\n",
        "                              '124', '201', '203', '205', '207', '208', '209', '215', '220', '223', '230']\n",
        "    self.test_record_list = ['100', '103', '105', '111', '113', '117', '121', '123', '200', '210',\n",
        "                              '212', '213', '214', '219', '221', '222', '228', '231', '232', '233', '234']\n",
        "\n",
        "    #Defining the labels (Normal 'N' and Ventricular Ectropic Beats 'VEB') and which type of heartbeats are associated with each class\n",
        "    self.labels = ['N', 'V']\n",
        "    self.valid_symbols = ['N', 'L', 'R', 'e', 'j', 'V', 'E']\n",
        "    self.label_map = {'N': 'N', 'L': 'N', 'R': 'N', 'e': 'N', 'j': 'N',\n",
        "                      'V': 'V', 'E': 'V'}\n",
        "\n",
        "  def _load_data(self, base_record, channel=0):\n",
        "    record_name = os.path.join(self.download_dir, str(base_record))\n",
        "\n",
        "    #Reading a .dat file\n",
        "    signals, fields = wfdb.rdsamp(record_name)\n",
        "    assert fields['fs'] == self.sample_rate\n",
        "\n",
        "    #Reading a .atr file\n",
        "    annotation = wfdb.rdann(record_name, 'atr')\n",
        "    symbols = annotation.symbol\n",
        "    positions = annotation.sample\n",
        "    return signals[:, channel], symbols, positions\n",
        "\n",
        "  def _normalize_signal(self,  signal, method='std'):\n",
        "\n",
        "    #Perform Min-Max scaling\n",
        "    if method == 'minmax':\n",
        "      min_val = np.min(signal)\n",
        "      max_val = np.max(signal)\n",
        "      return (signal - min_val) / (max_val - min_val)\n",
        "\n",
        "    #Perform Standard scaling (calculate z-scores)\n",
        "    elif method == 'std':\n",
        "      signal = (signal - np.mean(signal)) / np.std(signal)\n",
        "      return signal\n",
        "    else:\n",
        "      raise ValueError(\"Invalid method: {}\".format(method))\n",
        "\n",
        "  def _segment_data(self, signal, symbols, positions):\n",
        "    X, y  = [], []\n",
        "    sig_len = len(signal)\n",
        "    for i in range(len(symbols)):\n",
        "      start = positions[i] - self.window_size // 2\n",
        "      end = positions[i] + self.window_size // 2\n",
        "      if symbols[i] in self.valid_symbols and start >= 0 and end <= sig_len:\n",
        "        segment = signal[start:end]\n",
        "        assert len(segment) == self.window_size, \"Invalid length\"\n",
        "        X.append(segment)\n",
        "        y.append(self.labels.index(self.label_map[symbols[i]]))\n",
        "    return np.array(X), np.array(y)\n",
        "\n",
        "  def preprocess_dataset(self, normalize=True):\n",
        "    self._preprocess_dataset_core(self.train_record_list, \"train\", normalize)\n",
        "    self._preprocess_dataset_core(self.test_record_list, \"test\", normalize)\n",
        "\n",
        "  def _preprocess_dataset_core(self, record_list, mode=\"train\", normalize=True):\n",
        "    Xs, ys = [], []\n",
        "    save_dir = os.path.join(self.dataset_root, 'preprocessed', mode)\n",
        "    for i in range(len(record_list)):\n",
        "      signal, symbols, positions = self._load_data(record_list[i])\n",
        "      if normalize:\n",
        "        signal = self._normalize_signal(signal)\n",
        "      X, y = self._segment_data(signal, symbols, positions)\n",
        "      Xs.append(X)\n",
        "      ys.append(y)\n",
        "    os.makedirs(save_dir, exist_ok=True)\n",
        "    np.save(os.path.join(save_dir, \"X.npy\"), np.vstack(Xs))\n",
        "    np.save(os.path.join(save_dir, \"y.npy\"), np.concatenate(ys))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zSFRco-FSsmU"
      },
      "source": [
        "#Using our classes' preprocess_dataset function to preprocess the dataset\n",
        "BaseECGDatasetPreprocessor(dataset_root).preprocess_dataset()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6LXhy1nmT-N5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "outputId": "9d4f268a-2ae3-4293-8cdc-4ea0ca5e287b"
      },
      "source": [
        "#Having a look at the preprocessing output\n",
        "!tree ./dataset/preprocessed"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "./dataset/preprocessed\n",
            "├── test\n",
            "│   ├── X.npy\n",
            "│   └── y.npy\n",
            "└── train\n",
            "    ├── X.npy\n",
            "    └── y.npy\n",
            "\n",
            "2 directories, 4 files\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j5vghaTuSzmk"
      },
      "source": [
        "#Reading in our newly created files\n",
        "X_train = np.load(os.path.join(dataset_root, 'preprocessed', 'train', 'X.npy'))\n",
        "y_train = np.load(os.path.join(dataset_root, 'preprocessed', 'train', 'y.npy'))\n",
        "X_test = np.load(os.path.join(dataset_root, 'preprocessed', 'test', 'X.npy'))\n",
        "y_test = np.load(os.path.join(dataset_root, 'preprocessed', 'test', 'y.npy'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mj4_F6RVTEkd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "a0a526d8-ca70-4e12-d66c-531278ad7eba"
      },
      "source": [
        "#Looking at the sizes of our files\n",
        "#The first number delineates the number of samples available\n",
        "#The training data is 720-dimensional, as the signal is sampled 360 times per second and we took 2 seconds\n",
        "print(\"X_train.shape = \", X_train.shape, \" \\t y_train.shape = \", y_train.shape)\n",
        "print(\"X_test.shape = \", X_test.shape, \" \\t y_test.shape = \", y_test.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train.shape =  (47738, 720)  \t y_train.shape =  (47738,)\n",
            "X_test.shape =  (45349, 720)  \t y_test.shape =  (45349,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ss6w4JlJTYUH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "4b91f7ee-f841-4793-8448-b229f2b7746f"
      },
      "source": [
        "#Looking at the labels of the train and test data, we can see that we have an imbalanced dataset, as Normal heartbeat signals are more than 10 times as common as VEB signals\n",
        "uniq_train, counts_train = np.unique(y_train, return_counts=True)\n",
        "print(\"y_train count each labels: \", dict(zip(uniq_train, counts_train)))\n",
        "uniq_test, counts_test = np.unique(y_test, return_counts=True)\n",
        "print(\"y_test count each labels: \", dict(zip(uniq_test, counts_test)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "y_train count each labels:  {0: 43995, 1: 3743}\n",
            "y_test count each labels:  {0: 42149, 1: 3200}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TUpalkU0Tao1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "c23ff31a-f8d3-4181-c1ce-c6963b50955e"
      },
      "source": [
        "#Printing an example of a \"Normal\" heartbeat\n",
        "idx_n = np.where(y_train == 0)[0]\n",
        "plt.plot(X_train[idx_n[0]])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fd480052898>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f_mYCNzwTlmz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "1fba7033-f18a-43be-9fe9-bb8274621fec"
      },
      "source": [
        "#Printing an example of a \"VEB\" heartbeat\n",
        "idx_s = np.where(y_train == 1)[0]\n",
        "plt.plot(X_train[idx_s[0]])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fd469b88cf8>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oR3zBpQlTuWH"
      },
      "source": [
        "#Defining the dataset\n",
        "class ECGDataset(Dataset):\n",
        "\n",
        "  #Initiliasation\n",
        "  def __init__(self, path):\n",
        "    if os.path.isfile(os.path.join(path, 'X.npy')):\n",
        "      self.X = np.load(os.path.join(path, 'X.npy'))\n",
        "    else:\n",
        "      raise FileNotFoundError(\"{}/X.npy not found.\".format(path))\n",
        "    if os.path.isfile(os.path.join(path, 'y.npy')):\n",
        "      self.y = np.load(os.path.join(path, 'y.npy'))\n",
        "    else:\n",
        "      raise FileNotFoundError(\"{}/y.npy not found.\".format(path))\n",
        "  \n",
        "  #Retriving a signal sample and its associated label\n",
        "  def __getitem__(self, i):\n",
        "    return self.X[None, i].astype(np.float32), self.y[i]\n",
        "\n",
        "  #Length of the dataset\n",
        "  def __len__(self):\n",
        "    return len(self.X)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gTw9TDyHWPfW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ba8a0084-b9b6-4884-a81a-d1f0afbf1827"
      },
      "source": [
        "#Creating the actual custom training dataset\n",
        "train_path = os.path.join(dataset_root, 'preprocessed', 'train')\n",
        "train_dataset = ECGDataset(train_path)\n",
        "\n",
        "#Create mini-batches for Adam to optimize the loss function, so that the weights between the layers of the residual convolutional neural network can be updated,\n",
        "#so that eventually the optimal weights are reached\n",
        "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=256, shuffle=True)\n",
        "\n",
        "print(\"Training set size:\\t{}\".format(len(train_dataset)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training set size:\t47738\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B0xCZRJpQTa3"
      },
      "source": [
        "#Defining the layers that constitute the basic structure of the residual block \n",
        "class BaseBlock(nn.Module):\n",
        "  def __init__(self, input, channels, stride=1, dilate=1):\n",
        "    self.stride = stride\n",
        "    super().__init__()\n",
        "\n",
        "    self.conv1 = nn.Conv1d(input, channels, kernel_size=3, stride=stride, padding=dilate, dilation=dilate)\n",
        "    self.conv2 = nn.Conv1d(channels, channels, kernel_size=3, stride=1, padding=dilate, dilation=dilate)\n",
        "    if stride > 1:\n",
        "      self.convd = nn.Conv1d(input, channels, kernel_size=1, stride=stride, padding=0)\n",
        "    self.bnorm1 = nn.BatchNorm1d(channels)\n",
        "    self.bnorm2 = nn.BatchNorm1d(channels)\n",
        "\n",
        "  def forward(self, x):\n",
        "    h1 = F.relu(self.bnorm1(self.conv1(x)))\n",
        "    if self.stride > 1:\n",
        "      res = self.convd(x)\n",
        "    else:\n",
        "      res = x\n",
        "    h2 = res + self.bnorm2(self.conv2(h1))\n",
        "    return F.relu(h2)\n",
        "\n",
        "#Defining the number of BaseBlocks that make up a single ResBlock\n",
        "class ResBlock(nn.Module):\n",
        "  def __init__(self, input, channels, n_block, dilate=1):\n",
        "    self.n_block = n_block\n",
        "    super().__init__()\n",
        "\n",
        "    #Creating a ResBlock form BaseBlocks in a loop\n",
        "    self.block0 = BaseBlock(input, channels, 2, dilate)\n",
        "    self.res = nn.ModuleList()\n",
        "    for i in range(n_block):\n",
        "      self.res.append(BaseBlock(channels, channels, 1, dilate))\n",
        "\n",
        "  def forward(self, x):\n",
        "    h = self.block0(x)\n",
        "    for res in self.res:\n",
        "      h = res(h)   \n",
        "    return h\n",
        "\n",
        "#Defining the structure of the ResNet model\n",
        "class ResNet34(nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "\n",
        "    self.conv1 = nn.Conv1d(1, 64, kernel_size=7, stride=2, padding=3)\n",
        "    self.bnorm1 = nn.BatchNorm1d(64)\n",
        "    self.resblock0 = ResBlock(64, 64, 3)\n",
        "    self.resblock1 = ResBlock(64, 128, 4)\n",
        "    self.resblock2 = ResBlock(128, 256, 6)\n",
        "    self.resblock3 = ResBlock(256, 512, 3)\n",
        "    self.avgpool = nn.AdaptiveAvgPool1d(1)\n",
        "    self.l1 = nn.Linear(512, 2)\n",
        "\n",
        "  def forward(self, x):\n",
        "    h1 = F.relu(self.bnorm1(self.conv1(x)))\n",
        "    h2 = F.max_pool1d(h1, 3, 2)\n",
        "    h3 = self.resblock0(h2)\n",
        "    h4 = self.resblock1(h3)\n",
        "    h5 = self.resblock2(h4)\n",
        "    h6 = self.resblock3(h5)\n",
        "    h7 = self.avgpool(h6)\n",
        "    h7 = torch.flatten(h7, 1)\n",
        "    h8 = self.l1(h7)\n",
        "    return h8"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BJxoZ4-oQTrq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "f8bd71e1-5b5a-43b7-e58e-41ef150974aa"
      },
      "source": [
        "#Initialising the model\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "# device = torch.device(\"cpu\")\n",
        "model = ResNet34().to(device)\n",
        "print(model)\n",
        "\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.0001)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "ResNet34(\n",
            "  (conv1): Conv1d(1, 64, kernel_size=(7,), stride=(2,), padding=(3,))\n",
            "  (bnorm1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "  (resblock0): ResBlock(\n",
            "    (block0): BaseBlock(\n",
            "      (conv1): Conv1d(64, 64, kernel_size=(3,), stride=(2,), padding=(1,))\n",
            "      (conv2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "      (convd): Conv1d(64, 64, kernel_size=(1,), stride=(2,))\n",
            "      (bnorm1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      (bnorm2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "    )\n",
            "    (res): ModuleList(\n",
            "      (0): BaseBlock(\n",
            "        (conv1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (1): BaseBlock(\n",
            "        (conv1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (2): BaseBlock(\n",
            "        (conv1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (resblock1): ResBlock(\n",
            "    (block0): BaseBlock(\n",
            "      (conv1): Conv1d(64, 128, kernel_size=(3,), stride=(2,), padding=(1,))\n",
            "      (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "      (convd): Conv1d(64, 128, kernel_size=(1,), stride=(2,))\n",
            "      (bnorm1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      (bnorm2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "    )\n",
            "    (res): ModuleList(\n",
            "      (0): BaseBlock(\n",
            "        (conv1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (1): BaseBlock(\n",
            "        (conv1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (2): BaseBlock(\n",
            "        (conv1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (3): BaseBlock(\n",
            "        (conv1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (resblock2): ResBlock(\n",
            "    (block0): BaseBlock(\n",
            "      (conv1): Conv1d(128, 256, kernel_size=(3,), stride=(2,), padding=(1,))\n",
            "      (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "      (convd): Conv1d(128, 256, kernel_size=(1,), stride=(2,))\n",
            "      (bnorm1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      (bnorm2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "    )\n",
            "    (res): ModuleList(\n",
            "      (0): BaseBlock(\n",
            "        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (1): BaseBlock(\n",
            "        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (2): BaseBlock(\n",
            "        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (3): BaseBlock(\n",
            "        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (4): BaseBlock(\n",
            "        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (5): BaseBlock(\n",
            "        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (resblock3): ResBlock(\n",
            "    (block0): BaseBlock(\n",
            "      (conv1): Conv1d(256, 512, kernel_size=(3,), stride=(2,), padding=(1,))\n",
            "      (conv2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "      (convd): Conv1d(256, 512, kernel_size=(1,), stride=(2,))\n",
            "      (bnorm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      (bnorm2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "    )\n",
            "    (res): ModuleList(\n",
            "      (0): BaseBlock(\n",
            "        (conv1): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (1): BaseBlock(\n",
            "        (conv1): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "      (2): BaseBlock(\n",
            "        (conv1): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (conv2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))\n",
            "        (bnorm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "        (bnorm2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (avgpool): AdaptiveAvgPool1d(output_size=1)\n",
            "  (l1): Linear(in_features=512, out_features=2, bias=True)\n",
            ")\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n0Rkx6XfQXPW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "97edbcc3-61d2-44a3-b6b0-fa2e9dd0952a"
      },
      "source": [
        "#Initialising variables\n",
        "train_history = {'accuracy':[],'loss':[]}\n",
        "\n",
        "#Making a loop to train the neural network on the data\n",
        "max_epoch = 1\n",
        "\n",
        "#Looping over the epochs\n",
        "for epoch in range(max_epoch):\n",
        "  \n",
        "  accuracy_train = 0\n",
        "  cnt_train = 0\n",
        "  loss_train = 0\n",
        "  \n",
        "  model.train()\n",
        "    \n",
        "  #Actually looping over the minibatches\n",
        "  for idx, (data_train, target_train) in enumerate(train_loader):\n",
        "    optimizer.zero_grad()\n",
        "    x, y = data_train.to(device), target_train.to(device)\n",
        "    y_pred = model(x)\n",
        "\n",
        "    loss = F.cross_entropy(y_pred, y)\n",
        "    loss_train += loss.item()\n",
        "\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    #Calculating the accuracy\n",
        "    _, idx = y_pred.max(1)\n",
        "    accuracy_train += (idx == y).sum().item()\n",
        "    cnt_train += target_train.size(0)\n",
        "    \n",
        "  #Calculating the average loss and accuracy for the training dataset\n",
        "  avg_train_loss = loss_train / len(train_loader.dataset)\n",
        "  avg_train_acc = accuracy_train / cnt_train\n",
        "  \n",
        "  train_history['loss'].append(avg_train_loss)\n",
        "  train_history['accuracy'].append(avg_train_acc)\n",
        "\n",
        "  print('Epoch: {}\\nTrain Loss: {:.6f}\\tTrain Accuracy: {:.6f}'.format(epoch, avg_train_loss, avg_train_acc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 0\n",
            "Train Loss: 0.000368\tTrain Accuracy: 0.978906\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9uwU3QQ8x0uO"
      },
      "source": [
        "#Saving the trained model in Google Drive\n",
        "model_save_name = 'Train8-Basic.pt'\n",
        "path = F\"/content/gdrive/My Drive/Colab Notebooks/Models/{model_save_name}\" \n",
        "torch.save(model.state_dict(), path)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FJ4xr_j-yuKs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9144cdfe-8d3a-458c-be20-e56dfa83aea7"
      },
      "source": [
        "# #Initialising the model\n",
        "# device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "# model = ResNet34().to(device)\n",
        "\n",
        "# #Loading the trained model from Google Drive\n",
        "# model_save_name = 'Train8-1.pt'\n",
        "# path = F\"/content/gdrive/My Drive/Colab Notebooks/Models/{model_save_name}\" \n",
        "# model.load_state_dict(torch.load(path))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<All keys matched successfully>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SY5W_uVw9yMN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "89ba3e82-2eb8-4e84-d976-0d0d121f97b2"
      },
      "source": [
        "#Creating the custom test dataset\n",
        "test_path = os.path.join(dataset_root, 'preprocessed', 'test')\n",
        "test_dataset = ECGDataset(test_path)\n",
        "\n",
        "#Create mini-batches for Adam to optimize the loss function, so that the weights between the layers of the residual convolutional neural network can be updated,\n",
        "#so that eventually the optimal weights are reached\n",
        "test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=256, shuffle=True)\n",
        "\n",
        "print(\"Test set size:\\t{}\".format(len(test_dataset)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test set size:\t45349\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U5yPT68hAHbX"
      },
      "source": [
        "#Initialising variables\n",
        "preds = torch.zeros(0, dtype=torch.long)\n",
        "ys = torch.zeros(0, dtype=torch.long)\n",
        "\n",
        "model.eval()\n",
        "  \n",
        "#Actually looping over the minibatches\n",
        "with torch.no_grad():\n",
        "  for idx, (data_test, target_test) in enumerate(test_loader):\n",
        "    x, y = data_test.to(device), target_test.to(device)\n",
        "    y_pred = model(x)\n",
        "    _, idx = y_pred.max(1)\n",
        "\n",
        "    # Append batch prediction results\n",
        "    preds = torch.cat([preds, idx.view(-1).cpu()])\n",
        "    ys = torch.cat([ys, y.view(-1).cpu()])\n",
        "\n",
        "#Calculating the confusion matrix using scikit-learns function\n",
        "matrix = confusion_matrix(ys.numpy(), preds.numpy())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UDcR6dfpD61n"
      },
      "source": [
        "#Function to plot the confusion matrix using scikit-learns built-in functions\n",
        "def plot_confusion(ys, preds):\n",
        "  labels = sorted(list(set(ys)))\n",
        "  target_names = ['Normal', 'VEB']\n",
        "  df_matrix = pd.DataFrame(matrix, index=target_names, columns=target_names)\n",
        "  plt.figure(figsize = (5,3))\n",
        "  sn.heatmap(df_matrix, annot=True, annot_kws={\"size\": 18}, fmt=\"d\", cmap='Blues')\n",
        "  plt.show()\n",
        "\n",
        "#Function to report back the classification report using scikit-learns built-in functions\n",
        "def plot_classification(ys, preds):\n",
        "  target_names = ['Normal', 'VEB']\n",
        "  print(classification_report(ys, preds, target_names=target_names))\n",
        "  print(\"accuracy: \", accuracy_score(ys, preds))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G6EoIaLxAHsM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "outputId": "2ac178db-09c1-4605-811f-2bd7edbbaba5"
      },
      "source": [
        "#Plotting the confusion matrix\n",
        "plot_confusion(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bLZZAvvqAH7P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "df73e74d-399a-403f-da00-9e7a0002ac74"
      },
      "source": [
        "#Reporting several scoring metrixs\n",
        "plot_classification(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       0.99      0.95      0.97     42149\n",
            "         VEB       0.57      0.89      0.70      3200\n",
            "\n",
            "   micro avg       0.95      0.95      0.95     45349\n",
            "   macro avg       0.78      0.92      0.84     45349\n",
            "weighted avg       0.96      0.95      0.95     45349\n",
            "\n",
            "accuracy:  0.9458863481002888\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_h9BeePkEl_y"
      },
      "source": [
        "The results show that VEB samples are not very high, meaning that a large portion of positives were actually false positives."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WuYXYmevCAe4"
      },
      "source": [
        "## **3. Sampling the dataset to alleviate the class imbalance**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nU7LAfCSAIJ8"
      },
      "source": [
        "#Defining the undersampled-oversampled dataset\n",
        "class SampledECGDataset(ECGDataset):\n",
        "\n",
        "  #Initiliasation\n",
        "  def __init__(self, path):\n",
        "    super().__init__(path)\n",
        "    _, counts = np.unique(self.y, return_counts=True)\n",
        "    self.X, self.y = make_imbalance(self.X, self.y, sampling_strategy={0: counts[0]//4, 1: counts[1]})\n",
        "    smote = SMOTE(random_state=42)\n",
        "    self.X, self.y = smote.fit_sample(self.X, self.y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bdZ_FUxQA7pi"
      },
      "source": [
        "#Creating the sampled dataset\n",
        "train_path = os.path.join(dataset_root, 'preprocessed', 'train')\n",
        "train_dataset = SampledECGDataset(train_path)\n",
        "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=256, shuffle=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kB8ujpYZA9Jb"
      },
      "source": [
        "#Initialising the model\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = ResNet34().to(device)\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.0001)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LImOBEYGBFd9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "8bfb7d46-4a66-491c-b700-752e33494e79"
      },
      "source": [
        "#Initialising variables\n",
        "train_history = {'accuracy':[],'loss':[]}\n",
        "\n",
        "#Making a loop to train the neural network on the data\n",
        "max_epoch = 1\n",
        "\n",
        "#Looping over the epochs\n",
        "for epoch in range(max_epoch):\n",
        "  \n",
        "  accuracy_train = 0\n",
        "  cnt_train = 0\n",
        "  loss_train = 0\n",
        "  \n",
        "  model.train()\n",
        "    \n",
        "  #Actually looping over the minibatches\n",
        "  for idx, (data_train, target_train) in enumerate(train_loader):\n",
        "    optimizer.zero_grad()\n",
        "    x, y = data_train.to(device), target_train.to(device)\n",
        "    y_pred = model(x)\n",
        "\n",
        "    loss = F.cross_entropy(y_pred, y)\n",
        "    loss_train += loss.item()\n",
        "\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    #Calculating the accuracy\n",
        "    _, idx = y_pred.max(1)\n",
        "    accuracy_train += (idx == y).sum().item()\n",
        "    cnt_train += target_train.size(0)\n",
        "    \n",
        "  #Calculating the average loss and accuracy for the training dataset\n",
        "  avg_train_loss = loss_train / len(train_loader.dataset)\n",
        "  avg_train_acc = accuracy_train / cnt_train\n",
        "  \n",
        "  train_history['loss'].append(avg_train_loss)\n",
        "  train_history['accuracy'].append(avg_train_acc)\n",
        "\n",
        "  print('Epoch: {}\\nSampled Train Loss: {:.6f}\\tSampled Train Accuracy: {:.6f}'.format(epoch, avg_train_loss, avg_train_acc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 0\n",
            "Sampled Train Loss: 0.000589\tSampled Train Accuracy: 0.943126\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q-oex_WzCpIR"
      },
      "source": [
        "#Saving the trained model in Google Drive\n",
        "model_save_name = 'Train8-Sampled.pt'\n",
        "path = F\"/content/gdrive/My Drive/Colab Notebooks/Models/{model_save_name}\" \n",
        "torch.save(model.state_dict(), path)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OoLz5sgeDpkv"
      },
      "source": [
        "#Initialising variables\n",
        "preds = torch.zeros(0, dtype=torch.long)\n",
        "ys = torch.zeros(0, dtype=torch.long)\n",
        "\n",
        "model.eval()\n",
        "  \n",
        "#Actually looping over the minibatches of the test dataset\n",
        "with torch.no_grad():\n",
        "  for idx, (data_test, target_test) in enumerate(test_loader):\n",
        "    x, y = data_test.to(device), target_test.to(device)\n",
        "    y_pred = model(x)\n",
        "    _, idx = y_pred.max(1)\n",
        "\n",
        "    # Append batch prediction results\n",
        "    preds = torch.cat([preds, idx.view(-1).cpu()])\n",
        "    ys = torch.cat([ys, y.view(-1).cpu()])\n",
        "\n",
        "#Calculating the confusion matrix using scikit-learns function\n",
        "matrix = confusion_matrix(ys.numpy(), preds.numpy())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X7XjQWpuFIdp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "3a1f3dd0-7f65-42e9-807d-90a37a2314e8"
      },
      "source": [
        "#Plotting the confusion matrix \n",
        "plot_confusion(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QwldgC_tFYSr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "710db6a3-7aed-4d2e-a30b-094c3c6f950a"
      },
      "source": [
        "#Printing the classification report\n",
        "plot_classification(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       1.00      0.91      0.95     42149\n",
            "         VEB       0.45      0.97      0.61      3200\n",
            "\n",
            "   micro avg       0.91      0.91      0.91     45349\n",
            "   macro avg       0.72      0.94      0.78     45349\n",
            "weighted avg       0.96      0.91      0.93     45349\n",
            "\n",
            "accuracy:  0.913162363006902\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GfrL_9gHGi6J"
      },
      "source": [
        "Despite undersampling the majority class (normal heatbeats) and oversampling the minority class (VEB heartbeats), the precision has lowered to 0.45 (from 0.57). This means that of the samples that were predicted as VEB, about half of them are in fact false positives (Normal heartbeats in reality).\n",
        "\n",
        "Reversly, the recall score has improved to 0.97 (from 0.89), meaning that of the  VEB samples, the vast majority is actually predicted to be a VEB sample.\n",
        "\n",
        "This result tells us that the VEB heartbeats are very often correctly predicted (recall 0.97), but that the VEB prediction label is actually not a VEB heartbeat half of the time (precision 0.45)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PYk0pMmvK3DC"
      },
      "source": [
        "## **4. Using Focal Loss to improve the accuracy of VEB heartbeats** "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "horPih_MFgDF"
      },
      "source": [
        "#Defining the focal loss function\n",
        "def focal_loss(x, t, class_num=2, gamma=0.5, eps=1e-6):\n",
        "  p = F.softmax(x)\n",
        "  p = torch.clamp(p, min=eps, max=1-eps)\n",
        "  log_p = F.log_softmax(x).to(device)\n",
        "  t_onehot = torch.eye(class_num)[t.view(-1)].to(device)\n",
        "\n",
        "  loss_sce = -1 * t_onehot * log_p\n",
        "  loss_focal = torch.sum(loss_sce * (1. - p) ** gamma, axis=1)\n",
        "\n",
        "  return torch.mean(loss_focal)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ftpeS_Co7xAO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "36ae0488-7ba9-473f-917a-e4105d191a7a"
      },
      "source": [
        "#Creating the actual custom training dataset\n",
        "train_path = os.path.join(dataset_root, 'preprocessed', 'train')\n",
        "train_dataset = ECGDataset(train_path)\n",
        "\n",
        "#Create mini-batches for Adam to optimize the loss function, so that the weights between the layers of the residual convolutional neural network can be updated,\n",
        "#so that eventually the optimal weights are reached\n",
        "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=256, shuffle=True)\n",
        "\n",
        "print(\"Training set size:\\t{}\".format(len(train_dataset)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training set size:\t47738\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q7ToE5gCNgjK"
      },
      "source": [
        "#Initialising the model\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = ResNet34().to(device)\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.0001)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MgFwn-DcNvSt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "outputId": "0da3d51f-452e-4bc4-82a4-2f4f8ea38989"
      },
      "source": [
        "#Initialising variables\n",
        "train_history = {'accuracy':[],'loss':[]}\n",
        "\n",
        "#Making a loop to train the neural network on the data\n",
        "max_epoch = 1\n",
        "\n",
        "#Looping over the epochs\n",
        "for epoch in range(max_epoch):\n",
        "  \n",
        "  accuracy_train = 0\n",
        "  cnt_train = 0\n",
        "  loss_train = 0\n",
        "  \n",
        "  model.train()\n",
        "    \n",
        "  #Actually looping over the minibatches\n",
        "  for idx, (data_train, target_train) in enumerate(train_loader):\n",
        "    optimizer.zero_grad()\n",
        "    x, y = data_train.to(device), target_train.to(device)\n",
        "    y_pred = model(x)\n",
        "\n",
        "    loss = focal_loss(y_pred, y)\n",
        "    loss_train += loss.item()\n",
        "\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    #Calculating the accuracy\n",
        "    _, idx = y_pred.max(1)\n",
        "    accuracy_train += (idx == y).sum().item()\n",
        "    cnt_train += target_train.size(0)\n",
        "    \n",
        "  #Calculating the average loss and accuracy for the training dataset\n",
        "  avg_train_loss = loss_train / len(train_loader.dataset)\n",
        "  avg_train_acc = accuracy_train / cnt_train\n",
        "  \n",
        "  train_history['loss'].append(avg_train_loss)\n",
        "  train_history['accuracy'].append(avg_train_acc)\n",
        "\n",
        "  print('Epoch: {}\\nSampled Train Loss: {:.6f}\\tSampled Train Accuracy: {:.6f}'.format(epoch, avg_train_loss, avg_train_acc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch: 0\n",
            "Sampled Train Loss: 0.000263\tSampled Train Accuracy: 0.966714\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BaZZ2se4yqnY"
      },
      "source": [
        "#Saving the trained model in Google Drive\n",
        "model_save_name = 'Train8-FocalLoss.pt'\n",
        "path = F\"/content/gdrive/My Drive/Colab Notebooks/Models/{model_save_name}\" \n",
        "torch.save(model.state_dict(), path)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lzNhtnApzA3F"
      },
      "source": [
        "#Initialising variables\n",
        "preds = torch.zeros(0, dtype=torch.long)\n",
        "ys = torch.zeros(0, dtype=torch.long)\n",
        "\n",
        "model.eval()\n",
        "  \n",
        "#Actually looping over the minibatches of the test dataset\n",
        "with torch.no_grad():\n",
        "  for idx, (data_test, target_test) in enumerate(test_loader):\n",
        "    x, y = data_test.to(device), target_test.to(device)\n",
        "    y_pred = model(x)\n",
        "    _, idx = y_pred.max(1)\n",
        "\n",
        "    # Append batch prediction results\n",
        "    preds = torch.cat([preds, idx.view(-1).cpu()])\n",
        "    ys = torch.cat([ys, y.view(-1).cpu()])\n",
        "\n",
        "#Calculating the confusion matrix using scikit-learns function\n",
        "matrix = confusion_matrix(ys.numpy(), preds.numpy())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DY4eIxpozhuX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "e17b844c-c326-456e-8588-936dfc71f57a"
      },
      "source": [
        "#Plotting the confusion matrix \n",
        "plot_confusion(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Okm78nb6zm2u",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "2ecd92ca-6e07-4acd-e7a6-82838af0231b"
      },
      "source": [
        "#Printing the classification report\n",
        "plot_classification(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       0.99      0.92      0.95     42149\n",
            "         VEB       0.45      0.90      0.60      3200\n",
            "\n",
            "   micro avg       0.92      0.92      0.92     45349\n",
            "   macro avg       0.72      0.91      0.78     45349\n",
            "weighted avg       0.95      0.92      0.93     45349\n",
            "\n",
            "accuracy:  0.9153013296875344\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nvhK1nV00er7"
      },
      "source": [
        "The results show that a change of the loss function had a negative effect on the precision (0.57 -> 0.45) and a slightly positive effect on the recall value (0.89 -> 0.90) for VEB heartbeats. This might be due to the random weights that are intially set, or perhaps the gamma parameter of the focal loss function isn't optimised yet.\n",
        "\n",
        "In other words, of the heartbeat samples that were predicted as VEB heartbeats, only about half (45%) turn out to be actual VEB heartbeats. All the while, VEB heartbeats are still predicted with a high rate (90%)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X4I596pQ2v7S"
      },
      "source": [
        "## **5. Expanding the original ResNet34 network architecture**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mlXfJshYzp_e"
      },
      "source": [
        "#Expanding the ResNet34 into a Dilated ResNet34\n",
        "class DilatedResNet34(nn.Module):\n",
        "\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.conv1 = nn.Conv1d(1, 64, kernel_size=7, stride=2, padding=3)\n",
        "    self.bnorm1 = nn.BatchNorm1d(64)\n",
        "    self.resblock0 = ResBlock(64, 64, 3, 1)\n",
        "    self.resblock1 = ResBlock(64, 128, 4, 1)\n",
        "    self.resblock2 = ResBlock(128, 256, 6, 2)\n",
        "    self.resblock3 = ResBlock(256, 512, 3, 4)\n",
        "    self.avgpool = nn.AdaptiveAvgPool1d(1)\n",
        "    self.fc1 = nn.Linear(512, 2)\n",
        "    self.fc2 = nn.Linear(2, 2)\n",
        "\n",
        "  def forward(self, x):\n",
        "    h1 = F.relu(self.bnorm1(self.conv1(x)))\n",
        "    h2 = F.max_pool1d(h1, 3, 2)\n",
        "    h3 = self.resblock0(h2)\n",
        "    h4 = self.resblock1(h3)\n",
        "    h5 = self.resblock2(h4)\n",
        "    h6 = self.resblock3(h5)\n",
        "    h7 = self.avgpool(h6)\n",
        "    h7 = torch.flatten(h7, 1)\n",
        "    h8 = F.dropout(self.fc1(h7), 0.5)\n",
        "    h9 = self.fc2(h8)\n",
        "    return h9"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "28eZ1iSs88lx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "02e87151-0f22-428f-fba1-72d2ac628637"
      },
      "source": [
        "#Creating the actual custom training dataset\n",
        "train_path = os.path.join(dataset_root, 'preprocessed', 'train')\n",
        "train_dataset = ECGDataset(train_path)\n",
        "\n",
        "#Create mini-batches for Adam to optimize the loss function, so that the weights between the layers of the residual convolutional neural network can be updated,\n",
        "#so that eventually the optimal weights are reached\n",
        "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=256, shuffle=True)\n",
        "\n",
        "print(\"Training set size:\\t{}\".format(len(train_dataset)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training set size:\t47738\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p0R5KeEE5v_s"
      },
      "source": [
        "#Initialising the model\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = DilatedResNet34().to(device)\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.0001)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SOHy-NJ-7CJe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "544da42c-f068-4d9f-ba40-c1958e9e668b"
      },
      "source": [
        "#Initialising variables\n",
        "train_history = {'accuracy':[],'loss':[]}\n",
        "\n",
        "#Making a loop to train the neural network on the data\n",
        "max_epoch = 1\n",
        "\n",
        "#Looping over the epochs\n",
        "for epoch in range(max_epoch):\n",
        "  \n",
        "  accuracy_train = 0\n",
        "  cnt_train = 0\n",
        "  loss_train = 0\n",
        "  \n",
        "  model.train()\n",
        "    \n",
        "  #Actually looping over the minibatches\n",
        "  for idx, (data_train, target_train) in enumerate(train_loader):\n",
        "    optimizer.zero_grad()\n",
        "    x, y = data_train.to(device), target_train.to(device)\n",
        "    y_pred = model(x)\n",
        "\n",
        "    loss = F.cross_entropy(y_pred, y)\n",
        "    loss_train += loss.item()\n",
        "\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    #Calculating the accuracy\n",
        "    _, idx = y_pred.max(1)\n",
        "    accuracy_train += (idx == y).sum().item()\n",
        "    cnt_train += target_train.size(0)\n",
        "    \n",
        "  #Calculating the average loss and accuracy for the training dataset\n",
        "  avg_train_loss = loss_train / len(train_loader.dataset)\n",
        "  avg_train_acc = accuracy_train / cnt_train\n",
        "  \n",
        "  train_history['loss'].append(avg_train_loss)\n",
        "  train_history['accuracy'].append(avg_train_acc)\n",
        "\n",
        "  print('Epoch: {}\\nTrain Loss: {:.6f}\\tTrain Accuracy: {:.6f}'.format(epoch, avg_train_loss, avg_train_acc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 0\n",
            "Train Loss: 0.000816\tTrain Accuracy: 0.957644\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mxFWfRzo94UB"
      },
      "source": [
        "#Saving the trained model in Google Drive\n",
        "model_save_name = 'Train8-Dilated.pt'\n",
        "path = F\"/content/gdrive/My Drive/Colab Notebooks/Models/{model_save_name}\" \n",
        "torch.save(model.state_dict(), path)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6-1BT4vF-ZKS"
      },
      "source": [
        "#Initialising variables\n",
        "preds = torch.zeros(0, dtype=torch.long)\n",
        "ys = torch.zeros(0, dtype=torch.long)\n",
        "\n",
        "model.eval()\n",
        "  \n",
        "#Actually looping over the minibatches of the test dataset\n",
        "with torch.no_grad():\n",
        "  for idx, (data_test, target_test) in enumerate(test_loader):\n",
        "    x, y = data_test.to(device), target_test.to(device)\n",
        "    y_pred = model(x)\n",
        "    _, idx = y_pred.max(1)\n",
        "\n",
        "    # Append batch prediction results\n",
        "    preds = torch.cat([preds, idx.view(-1).cpu()])\n",
        "    ys = torch.cat([ys, y.view(-1).cpu()])\n",
        "\n",
        "#Calculating the confusion matrix using scikit-learns function\n",
        "matrix = confusion_matrix(ys.numpy(), preds.numpy())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UGW5D-sh9JTV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "9c0908de-f017-480e-d106-851b41c1444e"
      },
      "source": [
        "#Plotting the confusion matrix \n",
        "plot_confusion(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VXKIvxsD9Jj-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "2849bcf9-a96e-4737-80b9-aff2f79cd7b2"
      },
      "source": [
        "#Printing the classification report\n",
        "plot_classification(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       0.97      0.95      0.96     42149\n",
            "         VEB       0.48      0.67      0.56      3200\n",
            "\n",
            "   micro avg       0.93      0.93      0.93     45349\n",
            "   macro avg       0.73      0.81      0.76     45349\n",
            "weighted avg       0.94      0.93      0.93     45349\n",
            "\n",
            "accuracy:  0.9259741118878034\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l5j7oSW1_2N6"
      },
      "source": [
        "When comparing the dilated ResNet34 to the original ResNet34 model, it quickly becomes clear that the model did not improve the classification of VEB heartbeats, nor of Normal heartbeats. Especially the recall of VEB heartbeats fell down quite a bit: from 0.89 to 0.67. \n",
        "\n",
        "We can conclude that using a Dilated model may improve the scoring of a model for some problems, of which ours is not one."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eRJglLuW_2jx"
      },
      "source": [
        "## **6. Denoizing the original data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hb4W5caL9J0C"
      },
      "source": [
        "#Making a class to filter out the noise in the dataset\n",
        "class DenoiseECGDatasetPreprocessor(BaseECGDatasetPreprocessor):\n",
        "\n",
        "    def __init__(self, dataset_root='./', window_size=720):\n",
        "        super().__init__(dataset_root, window_size)\n",
        "\n",
        "    def _denoise_signal(self, signal, btype='low', cutoff_low=0.2, cutoff_high=25., order=5):\n",
        "        nyquist = self.sample_rate / 2.\n",
        "        if btype == 'band':\n",
        "            cut_off = (cutoff_low / nyquist, cutoff_high / nyquist)\n",
        "        elif btype == 'high':\n",
        "            cut_off = cutoff_low / nyquist\n",
        "        elif btype == 'low':\n",
        "            cut_off = cutoff_high / nyquist\n",
        "        else:\n",
        "            return signal\n",
        "        b, a = butter(order, cut_off, analog=False, btype=btype)\n",
        "        return lfilter(b, a, signal)\n",
        "\n",
        "    def _segment_data(self, signal, symbols, positions):\n",
        "        X, y = [], []\n",
        "        sig_len = len(signal)\n",
        "        for i in range(len(symbols)):\n",
        "            start = positions[i] - self.window_size // 2\n",
        "            end = positions[i] + self.window_size // 2\n",
        "            if symbols[i] in self.valid_symbols and start >= 0 and end <= sig_len:\n",
        "                segment = signal[start:end]\n",
        "                assert len(segment) == self.window_size, \"Invalid length\"\n",
        "                X.append(segment)\n",
        "                y.append(self.labels.index(self.label_map[symbols[i]]))\n",
        "        return np.array(X), np.array(y)\n",
        "\n",
        "    def prepare_dataset(self,  denoise=False, normalize=True):\n",
        "        if not os.path.isdir(self.download_dir):\n",
        "            self.download_data()\n",
        "\n",
        "        self._prepare_dataset_core(self.train_record_list, \"train\", denoise, normalize)\n",
        "        self._prepare_dataset_core(self.test_record_list, \"test\", denoise, normalize)\n",
        "\n",
        "    def _prepare_dataset_core(self, record_list, mode=\"train\", denoise=False, normalize=True):\n",
        "        Xs, ys = [], []\n",
        "        save_dir = os.path.join(self.dataset_root, 'preprocessed', mode)\n",
        "        for i in range(len(record_list)):\n",
        "            signal, symbols, positions = self._load_data(record_list[i])\n",
        "            if denoise:\n",
        "                signal = self._denoise_signal(signal)\n",
        "            if normalize:\n",
        "                signal = self._normalize_signal(signal)\n",
        "            X, y = self._segment_data(signal, symbols, positions)\n",
        "            Xs.append(X)\n",
        "            ys.append(y)\n",
        "        os.makedirs(save_dir, exist_ok=True)\n",
        "        np.save(os.path.join(save_dir, \"X.npy\"), np.vstack(Xs))\n",
        "        np.save(os.path.join(save_dir, \"y.npy\"), np.concatenate(ys))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pj8u2AnWEGiX"
      },
      "source": [
        "#Actually denoising and normalizing the downloaded input data\n",
        "DenoiseECGDatasetPreprocessor(dataset_root).prepare_dataset(denoise=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YfI4ti4KFNyk"
      },
      "source": [
        "#Saving the desnoised-normalised inoput training data\n",
        "X_train_d = np.load(os.path.join(dataset_root, 'preprocessed', 'train', 'X.npy'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tZC5_Dg3FTHC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "6184db8b-8ae8-4cff-8b1e-8dea1896d45e"
      },
      "source": [
        "#Plotting the the results of a normalised training input sample vs a denoised-normalised training input sample\n",
        "plt.subplots(figsize=(12, 4))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(X_train[idx_n[0]])\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(X_train_d[idx_n[0]])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aWJnGMI0GZNf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "c09faf87-c5df-4e4e-8a2d-4f7d403aec8f"
      },
      "source": [
        "#Initialising variables\n",
        "train_history = {'accuracy':[],'loss':[]}\n",
        "\n",
        "#Making a loop to train the neural network on the data\n",
        "max_epoch = 1\n",
        "\n",
        "#Looping over the epochs\n",
        "for epoch in range(max_epoch):\n",
        "  \n",
        "  accuracy_train = 0\n",
        "  cnt_train = 0\n",
        "  loss_train = 0\n",
        "  \n",
        "  model.train()\n",
        "    \n",
        "  #Actually looping over the minibatches\n",
        "  for idx, (data_train, target_train) in enumerate(train_loader):\n",
        "    optimizer.zero_grad()\n",
        "    x, y = data_train.to(device), target_train.to(device)\n",
        "    y_pred = model(x)\n",
        "\n",
        "    loss = F.cross_entropy(y_pred, y)\n",
        "    loss_train += loss.item()\n",
        "\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    #Calculating the accuracy\n",
        "    _, idx = y_pred.max(1)\n",
        "    accuracy_train += (idx == y).sum().item()\n",
        "    cnt_train += target_train.size(0)\n",
        "    \n",
        "  #Calculating the average loss and accuracy for the training dataset\n",
        "  avg_train_loss = loss_train / len(train_loader.dataset)\n",
        "  avg_train_acc = accuracy_train / cnt_train\n",
        "  \n",
        "  train_history['loss'].append(avg_train_loss)\n",
        "  train_history['accuracy'].append(avg_train_acc)\n",
        "\n",
        "  print('Epoch: {}\\nTrain Loss: {:.6f}\\tTrain Accuracy: {:.6f}'.format(epoch, avg_train_loss, avg_train_acc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 0\n",
            "Train Loss: 0.000535\tTrain Accuracy: 0.977272\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d3H31bwtGqpY"
      },
      "source": [
        "#Saving the trained model in Google Drive\n",
        "model_save_name = 'Train8-Denoise.pt'\n",
        "path = F\"/content/gdrive/My Drive/Colab Notebooks/Models/{model_save_name}\" \n",
        "torch.save(model.state_dict(), path)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KSBW41OoGvRE"
      },
      "source": [
        "#Initialising variables\n",
        "preds = torch.zeros(0, dtype=torch.long)\n",
        "ys = torch.zeros(0, dtype=torch.long)\n",
        "\n",
        "model.eval()\n",
        "  \n",
        "#Actually looping over the minibatches of the test dataset\n",
        "with torch.no_grad():\n",
        "  for idx, (data_test, target_test) in enumerate(test_loader):\n",
        "    x, y = data_test.to(device), target_test.to(device)\n",
        "    y_pred = model(x)\n",
        "    _, idx = y_pred.max(1)\n",
        "\n",
        "    # Append batch prediction results\n",
        "    preds = torch.cat([preds, idx.view(-1).cpu()])\n",
        "    ys = torch.cat([ys, y.view(-1).cpu()])\n",
        "\n",
        "#Calculating the confusion matrix using scikit-learns function\n",
        "matrix = confusion_matrix(ys.numpy(), preds.numpy())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4rhMcwf1GvlW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "942beb7b-b0c7-48fe-f1f0-bd9ab7c844a1"
      },
      "source": [
        "#Plotting the confusion matrix \n",
        "plot_confusion(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rrkvWdCGGv1k",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "14d6d9da-97aa-4ff9-8dff-cfde348c92ed"
      },
      "source": [
        "#Printing the classification report\n",
        "plot_classification(ys, preds)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       0.98      0.93      0.95     42149\n",
            "         VEB       0.43      0.70      0.53      3200\n",
            "\n",
            "   micro avg       0.91      0.91      0.91     45349\n",
            "   macro avg       0.70      0.81      0.74     45349\n",
            "weighted avg       0.94      0.91      0.92     45349\n",
            "\n",
            "accuracy:  0.9134931310502988\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I35qIGc0VVxM"
      },
      "source": [
        "Yet again, when comparing this denoised-model to our original \"basic\" model, both the precision (0.57 -> 0.43) and recall (0.89 -> 0.70) values of VEB heartbeats has decreased quite a lot, whilst predictions of Normal heartbeats only dropped a little bit.\n",
        "\n",
        "This might be due to the denoising removing important variations in the signal which may allow the model to better distinguish Normal heartbeats from VEB heartbeats."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "181JSJjzVWGV"
      },
      "source": [
        "## **7. Conclusion**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tPzoXb90VWe1"
      },
      "source": [
        "We managed to succesfully build a model that managed to distinguish Normal heartbeats from VEB heartbeats. Depending on the exact problem we needed to solve, the basic model could be sufficient.\n",
        "\n",
        "We explored several changes applied to the model and data to increase the scoring values of our model. Based on simple tests, it seems that resampling the original data might be the best option to improve the scores for VEB heartbeat detection. Notwithstanding that a combination of the applied techniques or the usage of other techniques might improve the scoring values even more."
      ]
    }
  ]
}